#+TITLE:       Learn You a Haskell for Great Good!
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-08-25 Tue


* 0. Introduction

** About this tutorial

   Haskell is a purely functional programming language.

   Haskell is lazy. That means that unless specifically told otherwise, Haskell won't execute functions and calculate thing untill it's really forced to show you a result.

   That goes well with referential transparency and it allows you to think of programs as a series of transformations on data.

   惰性语言中的计算只是一组初始数据和变换公式。

   Haskell 是静态语言。

** 0.1 调用函数

   其实 函数 分成 中缀函数（中缀表达式）和前缀函数（正常的函数）

   Haskell 中的函数定义并没有顺序的概念。

** 0.3 列表入门

   在 Haskell 中，列表是一种 单类型的（homogeneous）数据结构，可以用来存储多个类型相同的元素。 数据结构，是不是一种 type？

* 1. Starting Out :: 各就各位，准备

  "*" 是一个将两个数相乘的函数，就像三明治一样，用两个参数将它夹在中央，我们称之为“中缀函数”。 而其他大多数不能与数夹在一起的函数，则被称为前缀函数。绝大部分函数是前缀函数。

  从命令式编程走出来的人们，往往觉得函数调用与括号密不可分， 在 C 中，调用函数必加括号，就像 foo(), bar(1), 或者 baz(3, "haha"). 而在 haskell 中，函数的调用必须使用空格， 例如 bar (bar 3), 它不表示以 bar 和 3 两个参数区调用 bar，而是以 bar 3 所得的结果最为参数区调用bar。 在 C 中， 就相当于 bar(bar(3)).

  "+" 运算符对整数和浮点数都有用，所以我们的函数可以处理一切数值。

  在 haskell 中，每个函数或表达式都要返回一个结果。

  强大的类型系统是 Haskell 的秘密武器。在 Haskell 中，每个表达式都会在编译时得到明确的类型，从而提高代码的安全性。
  Haskell 中一切皆类型。


** 1.1 显示类型声明

    通过 :t 命令，后面跟任何合法的表达式，即可得到表达式的类型。

    凡是明确的类型，其首字母必为大写。

    字符串的类型显示为 [Char],其中的方括号表示这是一个列表，所以我们可以将它读作“一组字符的列表”。元组与列表不同，每个不同长度的元组都有其独立的类型。

    函数也有类型，编写函数时，给它一个显示的类型声明是个好习惯。
    // 其实，语言系统中，所有的东西，都给他一个类型，就是为了让不同的类型的互相使用，有相应的类型与类型间的匹配规则的对应。就是为了建立这种规则（显示的，或者是隐式推导的）

** 1.2 Haskell 常见类型

   元组也是类型，不过他们的类型取决于其中项的类型及数目，因而理论上可以有无限中元组类型。空元组同样也是个类型，它只有一种值，即 ().

* 2. Types and Typeclasses :: 相信类型

   Haskell 中万物皆有类型，因此在执行之时，编译器可以大有可为。

   与 Java 和 pascal 不同，haskell 支持类型推到。 写一个数字， 你没有必要另外告诉 haskell 说“它是数字”。类型系统对 haskell 的学习至关重要。

   类型是每个表达式都有的某种标签，它表明了这一表达式所属的范畴。例如：表达式 True 是 boolean型，"hello" 是字符串等等。


   函数也有类型。编写函数时，给他一个明确的类型声明是个好习惯，比较短的函数就不用多此一举了。
   不过也可以给他加上类型声明。

   Show 的成员为可用字符串表示的类型。目前为止，出函数以外的所有类型都是show的成员。 操作 Show 类型类，最常用的函数表示 show。

   // 可以通过可视化的方案，将这种 输入 和 输出 之间的有关系的关系：描述表示出来。

** 2.4 类型类入门

   String 只是 [Char] 的一个别名。 String 和 [Char] 完全等价，可以互换，不过我们尽量多使用 String了，因为 String 更易于书写，可读性也更高。

   read 的返回值属于 Read 类型类的实例，通过 类型注解 （type annotation）.

   对于所有的具有相同数目的输入参数，并且输入参数的类型都是相同的，以及相同数目以及类型的输出，是一个 type 的函数。

   函数的类型也是有分类的，比如，一些函数就是为了访问某个type，某个type的某些值，这些函数就是附属函数。
   某些函数，就是类似于指令一样的，实现从人观点上，对于其他object的利用的操作，这些函数就是独立函数。
   // 所以，在函数的设计上，也是叫做 专门函数，和 公共函数。

   由于类型类定义的是一个抽象的接口，一个类型可以作为多个类型类的实例，一个类型类也可以好友多个类型作为实例。
   有时，一个类型必须在成为某类型的实例之后，才能成为另一个类型。

* 3. Syntax in Function :: 函数的语法

  模式会从上至下进行检查，一旦有匹配，那对应的函数体就被应用了。（说明，面向函数式编程语言中，racket 和 haskell 都有这种可以对不同的输入，进行分开进行匹配的应用。）将多个函数合并起来的情况，使得函数每一部分都具有优先级的拿出来。

  要不要对内部的递归调用，进行说明呢？ 这个应该不好说明的！！！内部信息就让其 opaque，就好。

  这就是最简单的，零散式的函数，就有几个特殊值的输入。

* 4. Recursion :: 你好，递归

  递归在 haskell 中至关重要。 命令式语言要求你提供求解的步骤， haskell 则倾斜与让你提供问题的描述。这便是 haskell 没有 while 或 for 循环的原因，递归是我们的替代方案。

  // 如果使用 递归的话，你没有感觉， lisp 这种，可以直接感受到， 递归函数，在这个函数本身的位置，更加的明晰么。。。

  模式匹配 与 递归 简直就是天造地设。大多数 命令式语言 中没有模式匹配，于是你就得造一堆 if-else 来测试 边界条件。 而在 Haskell 中，我们仅需要使用 模式 将其表示出来。 第一个模式说，如果该 list 为空，崩溃。

  // Haskell 这种语法，就是为了在开始的时候，怎么输入，输入什么有定义。在function开始的时候，对输入的参数的不同情况，可以进行分类，分别展示情况，在每种情况中，又根据每种情况中的，参数的值的不同，来进行不同的case，然后，不同case 直达 函数要返回的 结果。

  这样做的目的，只有一个，就是让输入的作为要处理的信息，分门别类的，思维清晰的，进行加工。 将 输出的结果，直接对应到“分门别类”的门类中，直接 return。

  这就相似： 数学函数中的，分段函数一样，可以使用，一个 f(x) 值 然后后面跟着一个大花括号 "{", 然后从上到下，将各种情况列举出来，输入参数，就会在符合的该 段 中，进行执行。然后还可以根据输入信息的上下阈值的不同进行继续花括号。

  简直就是一个函数么，简直就是一个实现某个 值的输入的，对应某个输出的，全局的函数，（当然将所有类型阈值涵盖，或者又 else ）

** 门卫 和 模式匹配 之间 的关系 和区别

* 5. Higher Order Functions :: 高阶函数

  Haskell 中的函数它可以接收函数作为其参数，或可以返回另一个函数，这样的函数被称作高阶函数。

** Curried functions

   Every function in Haskell officially only takes one parameter. All the functions that accepted several parameters so far have been curried functions.

   Putting a space between two things is simply function application. This space is sort of like an operator and it has the highest precedence.

   If we call a function with too few parameters, we get back a partially applied function, meaning a function that takes as many parameters as we left out.


   // 和 continuation 的理念不同啊，continuation 保存的当前运行环境的信息。 而 haskell 中的 partial application 也是执行环境，但是停留在该应用的参数位置上面，而前只能实现，后面的全部参数的，而不是全部参数中任意的。

   Make sure you really understand how curried functions and partial application work because they are really import.

   在 Haskell 对于类型的定义，可以对其函数，规定任意类型，只要和另一变量的type一致就行， 则是输入数据中要的一部分，contract in racket 一定又对应的吧。

   #+BEGIN_SRC haskell

   applyTwice (3:) [1]

   #+END_SRC

   Haskell 果然可以信手拈来的获得 partial-application 的功能啊。

** 函数式程序员工具箱

   身为函数式程序员，我们很少需要对单个值多费心思。更多的情景是，处理一系列的数字，字母或者是其他类型的数据，通过转换这一类集合来求取最后的结果。

   // 像 map 或者 filter 这种函数，并没有规定，参数中的 函数，或数据的 类型是什么，只要，这个参数中的函数的类型，和参数中的数据的类型，相一致就行。 这样的函数，如何可视化展示，这是什么类型的函数！！！

   // 我将函数分成三类，不知对不对： 变量函数，（参数中的类型不重要，必要几个参数之间协调好就行。）；固定函数（函数的参数值，不过有几个，都必须是固定的类型）；类型类函数（函数的参数值，必须是属于某个固定的类型类的类型）

** Lambda

   People who are not well acquainted with how curry and partial application works often use lambdas where they don't need to.

   If a pattern matching fails in a lambda, a runtime error error occurs, so be careful when pattern matching in lambdas.
   // 这好像就是 racket 中没有 contract 的 定义么。 毕竟这里的 lambda 是一个匿名版的函数，不能定义的复杂了吧。

   // 有了 contract 是不是就说明 racket 也是 强类型的？ 不是，即使 haskell 没有类型定义，也可以进行类型推断的。。。

** Function application with $

   Apart from getting rid of parentheses, $ means that function application can be treated just like another function.

** Function composition

   A point free style is more readable and concise, because it makes you think about functions and what kind of functions composing them results in instead of thinking about data and how it's shuffled around.

   A composition chain is more pretty than the simple (i mean common way) one.

*** Point-Free Style

    Point-free 风格更加的简洁和易读。它使你倾向于思考函数的组合方式，而不是数据的传递和变化。 利用函数组合，可以很方便的将一组简单的函数组合在一起，使之成为一个复杂的函数。
    不过函数若过于复杂，再使用 Point－Free 风格往往会适得其反，降低代码可读性。因此，不鼓励构造较长的函数组合链。

* 6. Modules :: 模块

  A Haskell module is a collection of related functions, types and typeclasses.

  The Haskell standard library is split into modules, each of them contains functions that are somehow related and serve some common purpose.

  The syntax for importing modules in Haskell script is *import <module name>*. This must be done before any functions, so imports are usually done at the top of the file.

* 7. Making Our Own Types and Typeclasses :: 构造我们自己的类型和类型类

  // 这个类型系统 和 SICP 中的 abstraction 有区别么？ 好像连实现方式都是那么相似，使用 function 或 procedure 来实现的。但是确实是明确的表明了这是 type 而不是 function，或者是 procedure，这种将 data 和 control 分开的思想。。。

  构造子！！！ ！！！

  Remember, value constructors are just functions that take the fields as parameters and return a value of some type (like Shape) as a result.

  By using record syntax to create this data type, Haskell automatically made these functions: firstName, lastName, age, height, phoneNumber and flavor.

** Type parameters

   Type parameters are useful because we can make different types with them depending on what kind of types we want contained in our data type.

   就像数字是无限，只能使用 格式化的 12345. 来表示， 对于 type system，对于 type 的种类的描述也是无穷的，毕竟，有了 1 就得有 2， 有了 2 就得有 3， 有了 3， 全部都有了。。。。


   对于 haskell 将所有的函数对于其操作的数据，是有非常明确的关联关系的，不会含糊的。

   We usually use type parameters when the type that's contained inside the data type's various value constructors isn't really that important for the type to work.

   // 有两类的 数据类型处理，对所有的类型，都有严格的界限，所有的构造的type之间都有严格的界限，这样当形容某个现实实物的时候，必须让这些实物规规整整的。函数律法特别严格，没有一点的例外
   // 另外一中就是，数据就是数据，不管什么类型的，都可以对在一起，有什么不对的。名字已经说明含义，为什么还要在意其出身。

   即使是不同类型的数据放在一起，也是比较有关联型的数据类型，可以统一个 type parameters 统一定义的，type！！！

   对于 函数 和 type 的关系，function 可能只接受 type template 类型中的某些 type 类型，比如 自然数 中，只有 偶数，之类的。

   只有你将一个数据结构当成一种 type 以后，你才能真正重视这种 数据结构，这种 type


   Once again, it's very important to distinguish between "type constructor" and the "value constructor". When declaring a data type, the part before the = is the type constructor and the constructors after it (possibly separated by |'s)

** Derived instances

   为了将某些type 和 某个 function 进行联系起来，于是定义了 typeclass.

   Haskell 的 type system 和 typeclass 确实从方法论，思路上很优美解决了 type－function 之间的联系. 毕竟一个 type 可以对应 多个 function，一个function也可以操作多中 type。type 也可以产生，组合出多种的其他的 type。

   A typeclass is a sort of an interface that defines some behavior. A type can be an instance of a typeclass if it supports that behavior. In languages, like Java, Python, C++ and the like, classes are a blueprint from which we then create objects that contains create objects that contain state and can do some actions. Typeclasses are more like interface. We don't make data from typeclasses. Instead, we first make our data type and then we think about what it can act like. If it can act like something that can be equated, we make it an instance of the Eq typeclass.

   Haskell can derive the behavior of our types in these contexts if we use the deriving keyword when making our data type.

   // type system 就像文档归类中的：category 和 tag，category 可以将文档从总体上进行区分，但是某个 category 的某项内容在其他几个category 里面的某些文章里面也都有体现。但是又不能将它们放到一个新的 category 里面，因为从内容来分，它们相差甚远，只是有些能容涉及共同信息。tag 就是一种很好的方案，将有部分相同内容的全部文档，用一个该内容的tag，标记起来。

   // type system 中的 data :: 这种 type constructor 就是一种 category，生成的数据，都是属于这种类型的。但是又某些公用函数想要调用它们，必须让他们具有，这些公用函数可以识别的“tag”才行。这就是 derive。。。

   Java 用类的某个方法来实现（调用本类的某些属性，给一个function使用）。C++ 也要说明实现一个 abstract 类中的某个抽象方法。Haskell 中用 derive 实现。

   Haskell 这种方法更像是，打标签的方法。给自己的某个数据类型，让他具有某些mark，来让某些function来使用它。
   其他的一些面向对象的语言中，本身的抽象类，这类的也是这样的概念，但是总感觉没有直中要害，而是以一种实现具有广义函数的，胡胡乱乱的以抽象函数，来搪塞实现。没有将 tag，的特殊性，与其他的 method进行清晰的分开。因为它们都是 method。

** Type synonyms

   Type synonyms don't really do anything per se, they're just about giving some types different names so that they make more sense to someone reading our code and documentation.

   // 如果说，lisp 让所有的 syntax 都具有 其语言核心单元的 syntax 的话（让语言在语法级别无限扩充，而自己并没有发现自己的syntax和语言系统提供的syntax有什么区别。）。
   // 那么，Haskell 是真真正正的 让所有的 data type 都具有语言核心的 type 一致的使用特性。（你根本无法分清是自带的data type，还是个人通过定义定义出来的type。）
   // 比如： c 的指定以的结构，只能是 struct。 Java 中也只能是 Class ，和基础的 int， string，还是不同的，因为它们是 primitive。即使是lisp中，也是通过 list，cons 等形式定义，未能突破，所有的数据类型平等的生存的概念。虽然让所有的 syntax 平等相依了。

   // 但是在 Haskell 领域中，所有的 type，即使是 inter，circle，等等，都是同等水平，同等使用方案的，即使自己（programmer）设计的type是在这些 primitive 基础上实现的。
   // 虽说，lisp 在 sicp 中使用 abstraction 的概念，将 data 和 procedure 的概念分开了，但是基础的理解类型的type确实没有很明确的定义。

   // 我非常荣幸能够学习到 haskell，虽然浪费了写论文的时间。

   The keyword "type" might be misleading to some, because we're not actually make anything new (we did that with the data keyword), but we're just making a synonym for an already existing type.

** Recursive data structures

   As we've seen, a constructor in an algebraic data type can have several (or none at all) fields and each field must be of some concrete type. With that in mind, we can make types whose constructors have fields that are of the same type! Using that, we can create recursive data types, where one value of some type contains values of that type, which in turn contain more values of the same type and so on.

   Pattern matching is actually about matching constructors.

   Because it pattern matching works (only) on constructors, we can match for stuff like that, normal prefix constructors or stuff like 8 or 'a', which are basically constructors for the numeric and character types, respectively.

   将自己构建的 type 和 自带的 type 同等对待，则是一个语言在 类型系统 的先进性和优雅性的表现。

** Typeclasses 102

   Learned how to automatically make our own types instances of the standard typeclasses by asking Haskell to derive the instances for us.
   We are going to learn how to make our own typeclasses and how to make types instances of them by hand.

   A quick recap on typeclasses: typeclasses are like interfaces. A typeclass define some behavior (like comparing for ordering, enumeration) and then types that can behave in that way are made instances of that typeclass. The behavior of typeclasses is achieved by defining functions or just type declarations that we then implement. So when a type is an instance of a typeclass, we mean that we can use the functions that the typeclass defines with that type.

   "class" is for defining new typeclasses and instance is for making our types instances of typeclasses.

** A yes-no typeclass
** The Functor typeclass

   凡是拥有容器性质的类型都可以视为函子。我们可以将列表视为容器，它可以为空，也可以装有某些东西。
** Kind

   We saw that there are interesting parallels between functions and type constructors. They are, however, two completely different things.
* 8. Input and Output
