#+TITLE:       Why Functional Programming Matters
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-09-03 Thu


* Abstract

* Introduction

  一个函数，除了计算本身的值以外，不会产生任何作用。这种特性，将神许愿从决定“控制流”的重担中，拯救出来。

  由于表达式可以在任何时刻被求值，程序员可以随心所欲的使用变量的值来替代变量。

  没有赋值，没有副作用，没有控制流。

* An Analogy with Structured Programming

  指出函数式于结构化程序设计之间的相似性是很有帮助的。

  结构化程序的特性和优点被这样总结：
  + 结构化程序不包含 goto 语句
  + 结构化程序中的语句块没有多个入口与出口
  + 结构化程序与它们传统的对应物相比，更容易数学化的控制

  这些结构化程序的优点，与函数式的程序设计优点本质上很相似。

  结构化与非结构化的特征之间最重要的区别是，结构化程序用模块化的方法设计的。代表着巨大生产力的提升：

  写模块可以很容易的编写；模块化可以被利用，使以后的程序可以很块的开发；程序的模块可以独立测试，减少除错的时间。

  “不使用 goto”促进了“程序设计的小改良”，然而模块化设计却促进了“程序设计的大进化”。

  为了在观念上提升程序员将问题模块化的能力，必须在程序语言提供中提供新的粘合剂。复杂的作用域规则对分块编译的支持只是文本层面的，没有提供表达新观念的工具以分解问题。

  如果不会将椅子分开，那么只能整体实现一个椅子。这表明，模块化的非凡威力和拥有合适的粘合剂的重要性。

  函数式语言提供了两种新的，非常重要的粘合剂。函数式程序设计的威力的关键，它允许大幅度的改进模块化设计。
  函数式程序员必须追求的目标 －－ 更小，更简洁，更通用的模块，用我们将要描述的新粘合剂粘合起来。

* Glueing Functions Together

  函数式语言允许将传统型语言中不可分解的函数表达为一些部件的聚合，也就是一个泛化的高阶函数与一些特化的聚合。 只要一个新的数据类型被定义，就应当同时定义用于处理这种数据的高阶函数。
  这样就简化了数据类型的处理，同时也将与它的细节相关的知识局部话。

* Glueing Programming Together

  函数式语言提供的另一种粘合剂使得所有的程序都粘合在一起。惰性求值。

  lazy evaluation 和  stream 好像正好是相反的，lazy 是当外面的函数，调用里面的函数，真正调用的是好，再调用。
  stream 是当里面的，也就是输入的函数，有输入的时候，就会将数据输出。

  它使得将程序模块化为一个产生大量可能解的生成器与一个选取恰当解的选择器的方案变得可行。
