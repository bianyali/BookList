#+TITLE: Function

* 高阶函数
  在数学和计算机科学领域，高阶函数是至少满足下列一个条件的函数：
  * 接受一个或多个函数作为输入
  * 输出一个函数
  在数学中它们也叫做算子（运算符）或泛函。 微积分中的导数就是常见的例子，因为它映射一个函数到另一个函数。
  在无类型的 lambda演算 中，所有的函数都是高阶的； 在有类型的 lambda演算 （大多数函数式变成语言都是从中演化而来）中，高阶函数一般是那些函数型别包含多余一个箭头的函数。 在函数式编程中，返回另一个函数的高阶函数被称为 Curry化的函数。
  在很多函数式编程中能够找到 map函数，map函数是高阶函数的一个例子。 它接受一个函数 f 作为参数， 并返回接受一个列表并应用 f 到它的每个元素的一个函数。
  高阶函数的其他例子包括：函数复合，积分和常量函数

* Church数


* Currying

  在计算机科学中，接受多个参数变成一个单一参数（最初函数的第一参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 在直觉上，currying 是 如果你固定某些参数，你将得到余下参数的一个函数。 所以对于有两个变量的函数(expt y x), 如果固定 (= y 2), 则得到了有一个变量的函数 (expt 2 x).
  在理论计算科学中，currying 提供了在简单的理论模型中，比如：只接受一个单一参数的 lambda演算中，研究带有许多参数的方式。
  currying 对应的是 uncurrying，一种使用匿名单参数来实现多个参数的方法

* Lambda calculus

  lambda演算，是一套用于研究函数定义，函数应用和递归的形式系统。 它由Church和他的学生引入。 Church运用lambda演算给出判定性问题的一个否定的答案。 这种演算可以用来清晰地定义什么是一个可计算函数。 关于两个 lambda演算 表达式是否等价的命题无法通过一个“通用的算法”来解决，这是不可判定性能够证明的头一个问题，甚至还在停机问题之先。 Lambda演算对函数式编程有巨大影响，比如 Lisp语言， ML语言 和Haskell语言。

  * 非形式化的描述
    在lambda演算中，每个表达式都代表一个函数，这个函数有一个参数，并返回一个值。 不论是参数和返回值，也都是一个单参的函数。 可以这么说，lambda演算中，只有一种类型，那就是单参函数。
    函数通过lambda匿名定义的，这个表达式说明了此函数将对其参数进行什么操作。 例如， “加2”函数f(x)=x+2可以用lambda表达式表示为λx.x+2 (或者是 λy.y+2, 参数的取名无关紧要)， 而f(3)的值可以写作 (λx.x+3) 3. 函数的应用(application)是左结合的: f x y = (f x) y.
