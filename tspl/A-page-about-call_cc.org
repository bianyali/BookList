#+TITLE: A Page about call/cc
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-07-18 Sat


* What is call/cc?

  call/cc stands for "call with current continuation"; it is a function that exists in certain programming languages. What is does is not very easy to describe; in fact, think it is one of the strangest inventions of computer science.

* A first introduction

  At its heart, call/cc is something like the goto instruction (or rather, like a label for a goto instruction); but a Grand High Exalted goto instruction. I can see your hair turning green at this point: ever since Dijkstra's famous Turing award speech, we know that goto is Evil and can never be Grand, High and Exalted. Well, until you know more about call/cc.

  The point about call/cc is that it is not a static(lexical) goto instruction but a dynamic one. Just exactly what is meant by this should become clear later on. The call/cc function introduces some rather mysterious objects in the programming language, first-class reified continuations; these fundamentally alter the way the program is understood (some would say, making it much harder to understand - and admittedly there is truth in this).

* Who invented call/cc?

  A Correspondence between algol 60 and Church's Lambda-notation, introduces the "J" operator that is quite like call/cc.

* What does call/cc stand for?

  It means "call-with-current-continuation". At least, that is its official name in Scheme (and though the call/cc abbreviation is common, it has not achieved universal recognition and some Scheme implementations, such as guile, accept only the longer name). This refers to the fact that call/cc captures the current continuation, and applies its argument to this continuation (however, before you try to make sense of this please wait for me to explain what continuations are).

* Which programming languages have a call/cc function?

  Scheme is the canonical language having a call/cc function: it is officially called call-with-current-continuation, although the call/cc notation is semi-standard.

  The Standard ML of New Jersey also also has a call/cc function, that is called SMLofNJ.Cont.call.

  The Unlambda programming language also has a call/cc function (introduced simply because it is something that is difficult to understand and Unlambda is an obfuscated programming language): it is called "c".

  To the best of my knowledge, these are the only languages with a full-fledged call/cc function. Many other languages (notably Java, CAML or C++) incorporate a weaker form of call/cc ("outgoing-only continuation") called exceptions: we will explain what exceptions are and why they are weaker than true continuations.

  At a lower level, some OS's have support for a kind of call/cc function: the only that I know of is the Solaris form of Unix which supports the getcontext() function that is strongly related to call/cc. And processor Task State Segments (used in multitasking) could be though of as a manner of continuations.

  Finally, a call/cc function can be added to the Coq project by simply entering Axiom call/cc: (P:Type) ((P->EmptyT)->P)->P.: however, since Coq is not Turing-complete, this can be considered cheating.

* Outgoing-only continuations: exceptions

  Exceptions are present in many programming languages, and most people seem to have no problem understanding them. We review them briefly.

  An exception signals that a spacial condition (generally an error) was encountered in the course of the execution of a program. Signaling the condition (highly inappropriate term) is called raising the exception (most people use the term "throwing" here, but I prefer the former term). When this happens, normal execution ceases: the function in which the exception was raised terminates immediately, raising the exception again in its caller (parent), which terminates in turn, and so on until either the entire program is terminated or until it is caught. Catching the exception involves putting the code which might raise it in a special block; if the exception is raised, control is transferred to the exception handler which decides what to do; after the exception handler has returned, normal execution is resumed (at the end of the block, not where the exception was raised), as if the code had terminated normally.

  True exception (the raise/catch sort and not the break/block one) are of a different  nature: any block can raise an exception, it does need to have to be lexically embedded within a catch block. And the exception will be caught (if at all) by the innermost catch that is dynamically surrounding the raise.

* A digression on lexical vs dynamic scoping of exceptions

  The duration of closures is greater than simply the execution time of the function, and the simple stack-based model of computation fails (garbage-collection must be used, the closures must be stored on the heap rather than on the stack). I mention this here because there is analogy with escaping continuations: escaping continuations do to return addresses what escaping inner functions do to data (i.e. making lifetimes become unpredictable and forcing a replacement of the simple stack model by a more complex, garbage-collected graph).

* Exception in C: setjmp() and longjmp()

  The C programming language (or, rather, the POSIX standard) defines two functions, setjmp() and longjmp() which are the nearest thing C has to exception or continuations. We shall look at them in some detail because they have some interesting common points with call/cc and throw respectively.

  The setjmp() function stores the so-called "stack context" (not a very appropriate name for outgoing-only continuations like these, but let us stick to it) in a variable passed to it, the "jump buffer"; it then returns 0. The longjmp() function takes a jump buffer and a (non zero). These functions are used to implement exceptions in C: an exception handler is installed with the setjmp(), and the exception is raised with longjmp(). What the functions actually do is that setjmp() stores the size of the stack in the jump buffer, and longjmp() restores it. (Of course, there is a heavy amount of black magic involved, notably on the compiler's part, so that this not mess up with the various optimizations, and there are some complicated restrictions on the use of these functions; in the case where the longjmp() function is called from a signal handler, things get pretty messy indeed. But we are floating far above such worries.)

  One important restriction of the setjmp() and longjmp() functions is that the function that called setjmp() must not have returned between the call to setjmp() and that to longjmp(). The following code, for example, is invalid:

  Think of a setjmp() function that would not have this limitation and you have a good approximation of call/cc. If you adhere to a stack-based paradigm of computation, or things to work in all cases we would need a full copy of the stack as per getcontext().
* What call/cc does: a first description

  The call/cc function takes one argument. That argument should itself be a function f (hence, our programming language should allow first-class citizenship of functions). call/cc will apply f to the current continuation. The current continuation is something which looks a lot like a function (at lease in the Scheme version of call/cc it does; in the SML/NJ version it is a bit different but that is unimportant). If a continuation is applied to a value (or, as some prefer to say, thrown a value), it has the effect of making the call/cc (which produced that continuation) return that value. But other approaches are possible, so this should not be taken as part of the "fundamental" nature of call/cc but only as a contingent property of its main implementations.

* What are continuations?

  It is time by now to explain the meaning of the central keyword in all this discussion: that of a continuation.

  A continuation is "something which waits for a value" in order to perform some calculations with it. This is a very vague definition, but I think it nevertheless makes things clear. With every intermediate value in a computation, there is a continuation associated, which represents the future of the computation once that value is known. A continuation is not something, like a function, which takes a value and return another: it just takes a value and does everything that follows to it, and never returns.

  Continuations are not something static that can be determined at compile time: they are dynamic entities that are created and invoked as program execution proceeds.

  At each step in the program, when a value is being evaluated, there is a current continuation, waiting for the value to be thrown to it; the current continuation will perform the remainder of the computation, including calculating other values and calling other continuations.

  It can be argued, if we believe in the stack-based paradigm for computation, that a continuation represents the execution stack, i.e. the sequence of nested functions that are the callers of a given value, at a given point in the program execution history.

  The basic evaluation element in a programming language is this: evaluate an expression exp (possibly in a given environment *env*, if the language has named variables which is frequent) with a continuation *cont* (the current continuation) waiting for the result. Keep this in mind as we will say that we are evaluating an expression (in an environment) with a continuation, the "with" referring to the continuation that is waiting for the value.

  One important particular case is that when the result of one computation immediately determines (gives, yields, - or, more simply, "is") the result of another, that is, when the one is in tail position in another, such as the last instruction in a compound instruction or function body, then the continuation of the one is the same as the continuation of the other.

  If we allow the program to explicitly manipulate continuations, which is the whole point of call/cc, we are reifying these continuations. If they can be manipulated in exactly the same way as, say, integers (they can be passed as arguments to functions, returned as return values, passed to other continuations, and so on), then we have given them first-class citizenship.

  So when we apply call/cc to a function f with a continuation k (the current continuation hungrily waiting for the result of the said call/cc), call/cc applies f to k, _with continuation k_. Notice how k plays a double role: it is passed as the argument to f, and it is also the continuation to that same call. (The latter fact, as we have already pointed out that this fact is not so important, being more a convention in existing implementation of call/cc than a fundamental property of it. This says, in a way, that the function call is in tail position in the call/cc call.)


  We reconsider the previous examples. First,

#+BEGIN_SRC racket

(call/cc (lambda (k) (k 42)))

#+END_SRC

  Here, k is bound to the continuation waiting for call/cc to terminate. So we are evaluating (k 42), k being bound to the said continuation, with k again as (current) continuation; the latter fact is not used, since k is immediately thrown the value 42, making call/cc return.

  Second example:

#+BEGIN_SRC racket

(call/cc (lambda (k) (+ (k 42) 1729)))

#+END_SRC

  Here, we have two continuations, k, the continuation waiting for call/cc to finish, and also for (+ (k 42) 1729), and another continuation, say *l*, waiting for (k 42) to finish so as to add 1729 to it and throw it to k; but _that *l* will be left waiting (and eventually garbage-collected)_ because (k 42) never finishes, since k is a continuation.

  Third,

#+BEGIN_SRC racket

(call/cc (lambda (k) 42))

#+END_SRC

  This time we really need to use the fact that the function /f/ (here (lambda (k) 42)) gets applied with the same continuation k as the call/cc (the double role mentioned above).



** TODO on this page

   - Continuation Passing Style. Rewriting programs to use CPS.
   - Cute little mind-boggler (the "yin/yang" program).
   - Stack vs (garbage-collected) heap models of continuation chaining.
   - What is preserved by a continuation? dynamic-wind and related subjects.
   - call/cc and concurency: cooperative (and non cooperative) scheduling by continuation switching.
   - Implementing call/cc with fork (), with getcontext() (what is preserved in each case).
   - Implementing call/cc. CPS interpreters. Thoughts on continuations and tasks.
   - call/cc and the Curry-Howard isomorphism: Pierce's law, "going back in time", double negation and the meaning of disjunction.
   - call/cc in linear programming/logic

** Links

   - FOLDOC
   - Introduction to Scheme and its implementation
   - Teach youself Scheme in fixnum days
   - R5RS
   - SML/NJ
