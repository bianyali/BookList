#+TITLE:       The Seasoned Schemer
#+AUTHOR:      Yali Bian


+ 内容是关于list的处理的，所以处理的过程中会使用到各种递归，函数的迭代操作等。当然，如果将这些都弄懂了，就可以在实际编程的过程中进行使用了。
+ We must replace dot with (quote ()), because we are building a list.
+ 我突然清楚了为什么要读"little三部曲"了.
+ Little三部曲，阐述的是recurion算法的思想，而不仅仅是如何操作list，list可以代表当今世界的一切的数据问题(其实现在使用的数据，都比list要简单的多得多得多), 只要能够编写处理list的高级算法，就能够对当今的算法进行汇总。list是对所有数据的抽象，而program就是处理数据的。就像数学是世界的抽象一样，list类似于数学中得数值，而数学方程或者数学证明就如同program中得算法，程序一般。program是一种具体化的数学，都是对现实世界问题提供解决方案的。recursion-data就是list，是对现实世界所有事物最全面深刻的描述， recur 的算法也就是对现实世界事物最好的解决方法。
+ C中的数组，字符串等只是单层的list，根本就没有涉及数据的本质，只是最简单地数据，当然也是现在最容易实现，最普遍使用的数据。要想控制program整个世界，你需要学会这种思想，学会 list 的思想，而不仅仅是单层的for或者iteration。
+ 这才是我学习lisp需要学习的精髓。
+ list的处理，最好的方法就是在list中，处理list，生成list，在自己的代码里面进行迭代处理list，才是最无缝的处理方式。
+ 不同的语言对于编译有不同的理解，不同的编译方式，也就是对于programming language的语义的理解不同。C语言编译器理念，对于编译的理解是单层的，也就是字符串层次上面的，不同的字符串，因为单词的祝贺方式不同，有不同的语义，是对一个层面上的不同的排序方式的模式的识别，是一个层面上的，增加语义，就是增加一种不同的排序方式，然后使用正则文法进行分析，转换成相应地语义，进行计算机的执行。而lisp的理念，是讲语义理解为list，也就是多层次的，语义是可以层层叠加的。不同的语义，是不同的list，对于list的读取，也就是对list的文法的语义的分析，对于list的处理，也就是对list语义的改变；
