#+TITLE:       The Racket Reference
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-01-21


* 1. Language Model

  学习计算机包含了很多东西，就拿racket来说，学深了可以涉及到 OS，亦或者 language。 学工程了，就会涉及到 Internet TCP/IP等。 真是不是几个星期几个月就可以搞 定的。 一定要多方面的学习，才能掌握 CS 的基础。 在出国以前，这一定要形成。

** 1.1 Evaluation Model

   Racket evaluation can be viewed as the simplification of expression to obtain values.

*** Sub-expression and Continuation

    Some simplifications require more than one step.

    An expression that is not a value always be partioned into two parts: a redex, which is the part that changed in a single-step simplification, and the continuation, which is the evaluation context surrounding an expression. That is, the continuation says how to "continue" after the redex is reduced to a value.

    Before some things can be evaluated, some sub-expressions must be evaluated; for example, in the application (- 4 (+ 1 1)), the application of - can not be reduced until the sub-expression (+ 1 1) is reduced.

    Thus, the specification of each syntactic form specifies how (some of) sub-expressions are evaluated, and then how the results are combined to reduced the form away.

    The dynamic extent of an expression is the sequence of evaluation steps during which the expression contains the redex.

*** Tail Position

    What exactly is tail position for recur? The tail position is a position which an expression would return a value from. There are no more forms evaluated after the form in the tail position is evaluat.

    An expression expr1 is in tail position with respect to an enclosing expression expr2: if whenever expr1 becomes a redex, its continuation is the same as was the enclosing expr2's continuation.

    Tail-position specificatons provides a guarantee about the asymptotic space consumption of a computation. In general, the specification of tail positions goes with wach syntatic form, like if.

*** Multiple Return Values

    A Racket expression can evaluate to multiple values, in the same way that a procedure can accept multiple arguments.

    Most continuations expect a particular number of result values.

    In general, the specification of a syntactic form indicates the number of values that produces and the number that it expects from each of its sub-expression. In addition, some procedures (notably values) produce multiple values, and some procedures (notably call-with-values) create continuations internalllly that accept a certain number of values.

*** Top-Level Variables

    A set of top-level variables are available for substitutions on demand during evaluation.

    In Racket, the way definitions appear is just as important as the way that they are used.

    Racket evaluation thus keeps track of both definitions and the current expression, and it extends the sets of definitions in response to evaluating forms such as define.

    Each evaluation step, then, takes the current set of definitions and program to a new set of definitions and program.

    Before a define can be moved into the set of definitions, its right-hand expression must be reduced to a value.

    Using set!, a program can change the value associated with an existing top-level variable.

    Using set!, a program can change the value associated with an existing top-level variable.

    Change the VALUE associated with an EXISTING TOP-LEVEL VARIABLE.

*** Objects and Imperative Update

    In addition to set! for IMPERATIVE UPDATE of top-level variables, various procedures enable the modification of ELEMENTs within a compound data structure. For example, vector-set! modifies the content of a vector.

    To allow such modification to data, we must distinguish between values, which are the results of expressions, and objects, which hold the data reference by a value.

    A few kinds of objects can server directly as values, including booleans, (void), and small exact integers.

    More generally, a value is a reference to an object. For example, a value can be a reference to a particular vector that currently holds the value 10 in its first slot. If an object is modified, then the modification is visible through all copies of the value that reference tha same object.

    In the evaluation model, a set of objects must be carried  along with each step in evaluation, just like the definition set.

    The distinction between a *top-level variable* and an *object reference* is crucial. A topic-level variable is not a *value*; each time a *variable expression* is evaluated, the *value* is *extracted* from the current set of *definitions*. *An object reference* in contrast is a *value*, and therefore *needs no further evaluation*. The model evaluation steps above use angle-bracketd <o1> for an *object reference* to distinguish it from a *variable name*.

    A direct *object reference* can *never appear* in a *text-based* *source program*. A program representation with datum->syntax, however, can *embed direct references* to existing objects.

*** Object Identity and Comparisons

    The eq? operator compares two values, returning #t when the two values refer to the same object. This form of equality is suitable for comparing objects that support imperative update (e.g., to determine that the effect of modifying an object through one reference is visible through another reference). Also, an eq? evaluates quickly, and eq?-based hashing is more lightweight than equal?-based hashing in hash tables.

    Some cases, however, eq? is unsuitable as a comparison operator, because the generation of object is not clearly defined.

*** Garbage Collection

    /About references, weak references, I have lots of things to learn!!!/

    *Weak References* ::

*** Procedure Applications and Local Variables
*** Variables and Locations

    A /variable/ is a placehoder for a value, and expressions in an initial program refer to variables. A /top-level/ variable is both a variable and a location. Any other variable is always replaced by a location at run-time, so that evaluation of expressions involves only locations involves only locations. A single local variable (i.e., a non-top-level, non-module-level variable), such as a procedure argument, can correspond to different locations through different instantiations.

    The replacement of a variable with a location during evaluation implements Racket's /lexical scoping/. For example, when a procedure-argument variable /x/ is replaced by the location /xloc/, then it is replaced throughout the body of the procedure, including any nested lambda forms. As a result, future references of the variable always access the same location.

*** Modules and Module-Level Variables

    Most *definitions* in Racket are in modules. In terms of evaluation, a model is essentially a prefix on a defined name, so that different modules can define the name. That is, a *module-level variable* is like a *top-level variable* from the perspective of evaluation.

    One difference between a module and a top-level definition is that a module can be declared *without* instantiating its module-level definitions. Evaluation of a /require/ *instantiates* (i.e., triggers the instantiation of) a declared module, which creates variables that correspond to its module-level definitions.

**** Phases

     A module can be instantiated in multiple /phases/. A phase is an integer that, again, is effectively a prefix on the names of module-level definitions. A top-level /require/ instantiates a module at phase 0, if the module is not already instantiated at phase 0. A top-level (require (for-syntax ...)) instantiates a module at phase 1 (if it is not already instantiated at that level); for-syntax also has a different binding effect on further program parsing, as described in /Introducing Binding/.

     Within a module, some definitions are shifted by a phase already;

**** The Separate Compilation Guarantee

     When a module is compiled, its phase 1 is instantiated. This can, in turn, trigger the *transitive instantiation* of many other modules at other phases, including phase 1. Racket provide very strong guarantee about this instantiation called "The Separate Compilation Guarantee":

     Any effects of the instantiation of the module's phase 1 due to compilation on the Racket system are discarded.

     The practical consequence of this guarantee is that because effects are never visible, no module can detect whether a module it requires is already compiled.







*** Continuation Frames and Marks

    Every continuation /C/ can be partitioned into continuation frames /C1/, /C2/, ... /Cn/ such that /C = C1[C2[... [Cn]]]/, and no frame /Ci/ can be itself partitioned into smaller continuations. Evaluation steps add and remove frames to the current continuation, typically one at a time.

    Each frame is conceptually annotated with a set of continuation marks. A mark consists of a key and its value; the key is an arbitrary value, and each frame includes at most one make for any key. Various operations set and extract marks from continuations, so that marks can be used to attach information to a dynamic extent. For example, marks can be used to record information for a "stack trace" to be used when an exception is raised, or to implement dynamic scope.

*** Prompts, Delimited Continuations, and Barriers
*** Threads
*** Parameters
*** Exceptions
*** Custodians
** 1.2 Syntax Model

   The syntax of a Racket program is defined by:
     - *a read pass* that processes a character stream into a syntax object; and
     - *an expand pass* that processes a syntax object to produce one that is fully *parsed*.

   Source code is normally read in read-syntax mode, which produces a syntax object.

   The expand pass recursively processes a syntax object to produce a complete parse of the program.

*** 1.2.1 Identifiers and Binding

    An identifier is a source-program *entity*. Parsing a Racket program reveals that some identifiers correspond to *variables*, some refer to *syntactic forms*, and some are quoted to produce a *symbol* or a *syntax object*.

    An identifier binds another (i.e., it is a *binding*) when the former is /parsed as a variable/ and the /latter/ is parsed as a /reference/ to the former; the latter is bound. The scope of a binding is the set of source form to which it applies.

    The environment of a form is the set of bindings whose scope includes the form. A binding for a sub-expression shadows any bindings (i.e., it is shadowing) in its environment, so that uses of an identifier refer to the shadowing binding.

**** phase level

     Every binding has a phase level in which it can be referenced, where a phase level normally corresponds to an integer (but the special label phase level does not correspond to an integer).

     Phase level 0 corresponds to the run time of the enclosing module (or the run time of top-level expressions). Bindings in phase level 0 constitute the base environment.

     Phase level 1 corresponds to the time during which the enclosing module (or top-level expression) is expanded; bindings in phase level 1 constitute the transformer environment.

     Phase level -1 corresponds to the run time of a different module for which the enclosing module is imported for use at phase level 1 (relative to the importing module); bindings in phase level -1 constitute the template environment.

     The label level does not correspond to any execution time; it is used to track bindings (e.g., to identifiers within documentation) without implying an execution dependency.

     If an identifier has a local binding, then it is the same for all phase levels, though the reference is allowed only at a particular phase level. Attempting to reference a local binding in a different phase level from the binding's context produces a syntax error. If an identifier has a top-level binding or module binding, then it can have different such bindings in different phase levels.

*** 1.2.2 Syntax Objects

    A syntax object combines a simpler Racket *value*, such as a *symbol or pair*, with *lexical information* about /bindings/, /source-location information/, /syntax properties/, and /tamper status/. In particular, an identifier is represented as a symbol object that combines a symbol with lexical and other information.

    When a syntax object represents a more complex expression than an identifier or simple constant, its internal components can be extracted.


    The quote-syntax form bridges the evaluation of a program and the representation of a program. Specifically, (quote-syntax datum) produces a syntax object that preserves all of the the lexical information that datum had when it was parsed as part of the quote-syntax form.

*** 1.2.3 Expansion (Parsing)

    Expansion recursively processes a /syntax object/ in a particular /phase level/, starting with phase level 0.  Bindings from the syntax object's lexical information drive the expansion process, and cause new bindings  to be introduced for the lexical information of sub-expressions. In some cases, a sub-expression is expanded in a deeper phase than the enclosing expression.

**** 1.2.3.1 Fully Expanded Programs

     A complete expansion produces a syntax object matching the following grammar:


     A fully-expanded syntax object corresponds to a parse of a program (i.e., a parsed program), and lexical information on its identifiers indicates the parse.

     In a fully expanded program for a namespace whose base phase is 0, the relevant phase level for a binding in the program is Nif the bindings has N surrounding begin-for-syntax and define-syntaxes forms --not counting any begin-for-syntax forms that wrap a module form for the body of the module. The datum in a quote-syntax form, however, always preserves its information for all phase levels.

**** 1.2.3.2 Expansion Steps

     In a recursive expansion, each single step in expanding a syntax object at a particular phase level depends on the immediate shape of the syntax object being expanded:

     - If it is an identifier (i.e., a syntax-object symbol), then a binding is determined by the identifier's lexical information.

     - If it is a syntax-object pair whose first element is an identifier, and if the identifier has a binding other than as a top-level variable, then the identifier's binding is used to continue.

     - If it is a syntax-object pair of any other form, then a new syntax-object symbol '#%app is created using the lexical information of the pair. If the resulting #%app

     - If it is any other syntax object, then a new syntax-object symbol '#%datum is created using the lexical information of the original syntax object.

     Thus, the possibilities that do not fail lead to an identifier with a particular binding. This binding refers to one of three things:

     - A transformer binding, such as introduced by define-syntax or let-syntax.

     - A variable binding, such as introduced by a module-level /define/ or by /let/.

     - A core syntactic form, which is parsed as described for each form in Syntactic Forms. Parsing a core syntactic form typically involves recursive parsing of sub-forms, and may introduce bindings that determines the parsing of sub-forms.


**** 1.2.3.3 Expansion Context

     Each expansion step occurs in a particular context, and transformers and core syntactic forms may expand for different contexts. For example, a module form is allowed only in a top-level context, and it fails in other contexts. The possible contexts are as follows:

     - top-level context :: outside of any module, definition, or expression, except that sub-expressions of a top-level begin form are also expanded as top-level forms.
     - module-begin context :: inside the body of a module, as the only form within the module.
     - module context :: in the body of a module (inside the module-begin layer).
     - internal-definition context :: in a nested context that allows both definitions and expressions.
     - expression context :: in a context where only expressions are allowed.

     Different core syntactic forms parse sub-forms using different contexts.

**** 1.2.3.4 Introducing Bindings
**** 1.2.3.5 Transformer Bindings
**** 1.2.3.6 Partial Expansion
**** 1.2.3.7 Internal Definitions
**** 1.2.3.8 Module Phase and Visits
**** 1.2.3.9 Macro-Introduced Bindings

*** 1.2.4 Compilation

    Before expanded code is evaluated, it is first compiled. A compiled form has essentially the same information as the corresponding expanded form, though the internal representation naturally dispenses with identifiers for syntactic forms and local bindings.

*** 1.2.5 Namespaces
*** 1.2.6 Inferred Value Names
*** 1.2.7 Cross-Phase Persistent Module Declarations

** 1.3 The Reader

   Racket's reader is a recursive-descent parser that can be configured through a readtable and various other parameters. This section describes the reader's parsing when using the default readtable.

   The reader can be invoked in either of two modes: read mode, or read-syntax mode. In read-syntax mode, the result is always a syntax object that includes source-location and (initially empty) lexical information wrapped around the sort of datum that read mode would produce.

   Reading is defined in terms of Unicode characters.

   Symbols, keywords, strings, byte strings, regexps, characters, and numbers produced by the reader in read-syntax mode are interned, which means that such values in the result of read-syntax are always eq? when they are equal? (whether from the same call or different calls to read-syntax).

*** 1.3.1 Delimiters and Dispatch

    Along with whitespace, the following characters are delimiters:

    #+BEGIN_SRC racket

    (
    )
    [
    ]
    {
    }
    "
    ,
    '
    `
    ;

    #+END_SRC

    A delimited sequence that starts with any other character is typically parsed as either a symbol, number, or extflonum, but a few non-delimiter characters play special roles.

    - "#" has a special meaning as initial character in a delimited sequence; its meaning depends on the characters that follow;
    - "|" start a sub-sequence of characters to be included verbatim in the delimited sequence; the sub-sequence is terminated by another "|", and neither the initial nor terminating "|" is part of the sub-sequence.
    - "\" outside of "|" pair causes the following character to be included verbatim in a delimited sequence.

    More precisely, after skipping whitespace, the reader dispatches based on the next character or characters in the input stream as follows:

*** 1.3.2 Reading Symbols

    A sequence that does not start with a delimiter or # is parsed as either a symbol, a number, or a extflonum, except that . by itself is never parsed as a symbol or number.

    A #% also starts a symbol. The resulting symbol is interned. A successful number or extflonum parse takes precedence over a symbol parse.

*** 1.3.3 Reading Numbers

    A sequence that does not start with a delimiter is parsed as a number when it matches the following grammar case-insensitively for <number 10>(decimal), where n is a meta-meta-variable in the grammar. The resulting number is interned in read-syntax mode.

    As the non-terminal names suggest, a number that has no exactness specifier and matches only <inexact-number n> is normally parsed as an inexact number, otherwise, it is parsed as an exact number. If the read-decimal-as-inexact paramter is set to #f, then all numbers without an exactness specifier are instead parsed as exact.

*** 1.3.4 Reading Extflonums
*** 1.3.5 Reading Booleans
*** 1.3.6 Reading Pairs and Lists

    To parse the pair or list, the reader recursively reads data until a matching ")", "]", "}" (respectively) is found, and it specially handles a delimited '.'.
    Pairs (), [], and {} are treated the same way, so the remainder of this section simply uses "parentheses" to mean any of these pair.

    In read-syntax mode, the recursive reads for the pair/list elements are themselves in read-syntax mode, so that the result is a list or pair of syntax objects that is itself wrapped as a syntax object.

*** 1.3.7 Reading Strings

    When the reader encounters ", it begins parsing characters to form a string. The string continues until it is terminated by another " (that is not escaped by \). The resulting string is interned in read-syntax mode.

    A string constant preceded by # is parsed as a byte string. Each character within the byte-string quotes must have a Unicode code-point number in the range 0 to 255, which is used as the corresponding byte's value; if a character is not in that range, exception is raise.

*** 1.3.8 Reading Quotes

    When the reader encounters ', it recursively reads one datum and forms a new list containing the symbol 'quote and the following datum.

*** 1.3.9 Reading Comments
*** 1.3.10 Reading Vectors
*** 1.3.11 Reading Structures

    When the reader encounters a "#s(", "#s[", or "#s{", it starts parsing an instance of a prefab structure type.

*** 1.3.12 Reading Hash Tables

    A #hash starts an immutable hash-table constant with key matching based on equal?.

*** 1.3.13 Reading Boxes

    When the reader encounters a #&, it starts parsing a box;

*** 1.3.14 Reading Characters
*** 1.3.15 Reading Keywords
*** 1.3.16 Reading Regular Expressions

    A #rx or #px starts a regular expression. The characters immediately after #rx or #px must parse as a string or byte string.

*** 1.3.17 Reading Graph Structure

    Allows the reader to produce a datum that has graph structure.

*** 1.3.18 Reading via an Extension

    When the reader encounters #reader, it loads an external reader procedure and applies it to the current input stream.

    The reader recursively reads the next datum after #reader, and passes it to the procedure that is the value of the /current-reader-guide/ parameter; the result is used as a module path. The module path is passed to dynamic-require with either 'read or 'read-syntax.

    The #lang reader form is similar to #reader, but more constrained: the #lang must be followed by a single space (ASCII), and then a non-empty sequence of alphanumberic ASCII.

    A sequence #lang <name> is equivalent to either #reader (submod <name> reader) or #reader <name>/lang/reader, where the former is tried first guarded by a module-declared? check.

*** 1.3.18.1 S-Expression Reader Language
*** 1.3.18.2 Chaining Reader Language

    The reader "language" is a kind of meta-language. It reads the S-expression that follows #lang reader and uses it as a module path (relative to the module being read) that effectively takes the place of reader. In other words, the reader meta-language generalizes the syntax of the module specified after #lang to be a module path, and without the implicit addition of /lang/reader to path.

** 1.4 The Printer
* 4. Datatypes

** 1. Booleans and Equlity
** 2. Numbers
** 3. String?
** 4. Byte Strings
** 5. Characters
** 6. Symbols
** 7. Regular Expresson
** 8. Keywords
** 9. Pairs and Lists
** 10. Mutable Pairs and Lists
** 11. Vectors
** 12. Boxes
** 13. Hash Tables
** 14. Sequences and Streams
           Sequences and streams abstract over iteration of elements in a collection. Sequences allow iteration with for macros or with sequence operations such as sequence-map. Streams are functional sequences that can be used either in a general way or a stream-specific way. Generators are closely related stateful objects that can be converted to a sequence and vice-versa.

***           1. Sequences
              A sequence encapsulates an ordered collection of values. The elements of a sequence can be extracted with one of the for syntax forms, with the procedures returned by sequence-generate, or by converting the sequence into a stream.



***           2. Streams

***           3. Generators

** 15. Dictionaries
** 16. Sets
** 17. Procedures
** 18. Void
** 19. Undefined
* 13. Input and Output

** 13.1 Ports

   Ports produce and/or consume bytes. An input port produces bytes, while an output port comsume bytes (and some ports are both input ports and output ports). When an input port is provided to a character-based operation, the bytes are decoded to a character, and character-based output operations similarly encode the character to bytes. In addition to bytes and characters encoded as bytes, some ports can produce and/or comsume arbitrary values as special results.

   Data produced by a input port can be read or peeked. When data is read, it is considered consumed and removed from the port's stream. When data is peeked, it remains in the port's stream to be returned again by the next read or peek. Previously peeked data can be committed, which causes the data to be removed from the port as for a read in a way that can be synchronized with other attempts to peek or read through a synchronizable event. Both read and peek operations are normally blocking, in the sense that the read or peek operation does not complete until data available from the port; non-blocking variants of read and peek operations are also available.

   The global variable eof is bound to the end-of-file value, and eof-object? returns #t only when applied to this value.

*** 13.1.1 Encodings and Locales

    When a port is provided to a character-based operation, such as read-char or read, the port's bytes are read and interpreted as a UTF-8 encoding of characters. Thus, reading a single character may require reading multiple bytes, and a procedure like char-ready? may need to peek several bytes into the stream to determine whether a character is available. In the case of a byte stream that does not correspond to a valid UTF-8 encoding, functions such as read-char may need to peek one byte ahead in the stream to discover that the stream is not a valid encoding.

    When an input port procedures a sequence of bytes that is not a valid UTF-8 encoding in a character-reading context, then bytes that constitute an invalid sequence are converted to the character #\uFFFD. To put is another way, when reading a sequence of bytes as characters, a minimal set of bytes are changed to the encoding of #\uFFFD so that the entire sequence of bytes is a valid UTF-8 encoding.

    A locale captures information about a user's language-specific interpretation of character sequences. In particular, a locale determines how strings are "alphabetized," how a lowercase character is converted to an uppercase character, and how strings are compared without regard to case.
*** 13.1.2 Managing Ports
*** 13.1.3 Port Buffers and Positions

    Some ports -- especially those that read from and write to files -- are internally buffered.

    - An input port is typically block-buffered by default, which means that on any read, the buffer is filled with immediately-available bytes to speed up future reads. Thus, if a file is modified between a pair of reads to the file, the second read can produce stale data. Calling file-position to set an input port's file flushes its buffer.

    - An output port is typically block-buffer by default, though a *terminal output* is *line-buffered*, and the initial error output port is unbuffered.
      An output buffer is filled with a sequence of written bytes to be committed as a group, either when the buffer is full (in block mode), when a newline is written (in line mode), when the port is closed via close-out-put-port, or when a flush is explicitly requested via a procedure like flush-output.

    If an input port, peeking always places peeked bytes into the port's buffer, even when the port's buffer mode is 'none; furthermore, on some platforms, testing the port for input (via char-ready? or synx) may be implemented with a peek. If an input port's buffer mode is 'none, then at most one byte is read for read-bytes-avail!*.

    Only file-stream ports, TCP ports, and custom ports use buffers; when called on a port without a buffer, flush-output has no effect.

    Not all file-stream ports support setting the position; if file-position is called with a position argument on such a file-stream port, the exn:fail:filesystem exception is raised.

*** 13.1.4 Counting Positions, Lines, and Columns

    By default, Racket keeps track of the position in a port as the number of bytes that have been read from or written to any port (independent of the read/write position, which is accessed or changed with file-position). Racket can track the position in terms of characters (after UTF-8 decoding), instead of bytes, and it can track line locations and column locations; this optional tracking must be specifically enabled for a port via port-count-lines! or the port-count-lines-enabled paramter.

*** 13.1.5 File Ports

    A port created by open-input-file, open-output-file, subprocess, and related functions is a file-stream port. The initial input, output, and error ports in racket are also file-stream ports. The file-stream-port? predicate recognizes file-stream ports.

    When an input or output file-stream port is created, it is placed into the management of the current custodian. In the case of an output port, a flush callback is registered with the current plumber to flush the port.

    The port produced by open-input-file should be explicitly closed, either through close-input-port or indirectly via custodian-shutdown-all, to release the OS-level file handle.

    The input port will not be closed automatically if it is otherwise available for garbage collection; a will could be associated with an input port to close it more automatically.

    - call-with-input-file

      Calls open-input-file with the /path/ and /mode-flag/ arguments, and passes the resulting port to proc. The result of proc is the result of the call-with-input-file call, but the newly opened port is *closed when proc returns*.

    - call-with-input-file*

      Like call-with-input-file, but the newly opened port is closed whenever control escaped the dynamic extent of the call-with-input-file* call, whether through proc's return, a continuation application, or a prompt-based abort.

    - with-input-from-file

      Like call-with-input-file*, but instead of passing the newly opened port to the given procedure argument, the port is installed as the current input port using parameterize around the call to thunk.

*** 13.1.6 String Ports

    A string port reads or writes from a byte string. An input string port can be created from either a byte string or a string; in the latter case, the string is effectively converted to a byte string using string->bytes/utf-8. An output string port output into a byte string, but get-output-string conveniently converts the accumulated bytes to a string.

    Input and output string ports do not need to be explicitly closed. The file-position procedure works for string ports in position-setting mode.

*** 13.1.7 Pipes

    A Racket pipe is internal to Racket, and not related to OS-level pipes for communicating between different processes.

    OS-level pipes may be created by subprocess, opening an existing named file on a Unix filesystem, or starting Racket with pipes for its original input, output, or error port. Such pipes are file-stream ports, unlike the pipes produced by make-pipe.

*** 13.1.8 Structures as Ports
*** 13.1.9 Custom Ports

    The make-input-port and make-output-port procedures create custom ports with arbitrary control procedures (much like implementing a device driver). Custom ports are mainly useful to obtain fine control over the action of committing bytes as read or written.

    // A little hard and abstract to me
    // read it again later (maybe when I read contract and other APIs in Reference)

*** 13.1.10 More Port Constructors, Procedures, and Events

**** Port String and List Conversions
**** Creating Ports
**** Copying Streams
** 13.2 Byte and String Input
** 13.3 Byte and String Output
** 13.4 Reading

   // The Reading related to The Reader, which reads standard Racket expression with Racket't built-in Parser.

** 13.5 Writing
** 13.6 Pretty Printing

*** Basic Pretty-Print Options
*** Per-Symbol Special Printing
*** Line-Output Hook
*** Value Output Hook
*** Additional Custom-Output Support

** 13.7 Reader Extension

   Racket's reader can be extended in three ways: through a reader-macro procedure in a readtable, through a #reader form, or through a custom-port byte reader that returns a "special" result procedure. All three kinds of /reader extension procedure/ accept similar arguments, and their results are treated in the same way by read and read-syntax (or, more precisely, by the default read handler).

*** 13.7.1 Readtables

    The dispatch table in Delimiters and Dispatch corresponds to the default /readtable/. (read table). By creating a new readtable and installing it via the current-readtable parameter, the reader's behavior can be extended.

    A readtable is consulted at specific times by the reader:
    - When looking for the start of a datum;
    - When determining how to parse a datum that starts with #;
    - When looking for a delimiter to terminate a symbol or number;
    - When looking for an opener (such as '('), closer (such as '('), or '.' after the first character parsed as a sequence for a pair,list, vector, or hash table;
    - When looking for an opener after #<n> in a vector of specified length <n>.
