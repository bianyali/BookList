#+TITLE:       Backus-Naur Form
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-08-19 Wed



* Intro


** 什么是BNF?

   BNF :: 几乎每一位新编程语言书籍的作者都使用巴科斯范式来定义编程语言的语法规则。

   BNF 被用来形式化定义语言的语法，以使其规则没有歧义。

   事实上，BNF 非常精确，围绕这些语法有很多数学理论，使得人们竟然可以机械地为基于 BNF 语法的 语言构造解析器。
   （有些语法不能实现，但通常可以手工地通过转换成其他形式来实现）。

** 基本原理

   BNF 语法定义的语言只不过是一个字符串集合，你可以按照下述规则书写，这些规则叫做书写规范（生产式规则），形式如下：
      symbol := alternative1 | alternative2 ...

   每条规则申明 := 左侧的符号必须被右侧的某一个可选项代替。
   替换项用“|”分割（有时用“::=”替换“:=”，但意思是一样的）。
   替换项通常有两个符号和终结符构成。
   之所以叫做终结符是因为没有针对他们的书写规范，他们是书写过程的终止（符号通常被叫做非终止符，也有人叫非终端）

   BNF 语法的另一个变化是把终止符（终端）放在引号中，把他们与符号区别开来。
   有些 BNF 语法用符号明确地标明允许使用空格的地方，而有的语法则把它留给读者推测。
   BNF 中有一个特殊符号“@”，表示符号可以去掉。如果用@替换符号，只需要将符号去掉。这非常有用，因为如果不利用这个技巧，有时很难终止替换过程。
   因此，一个语法描述的语言就是用书写规则（生产式规则）写的字符串的集合。如果一个字符串无法用这些规则写出，那么，该字符串在这个语言中就被禁用。

** BNF和EBNF的使用

   多数编程语言标准都使用一些EBNF变量来定义语言的语法。

   这有两个好处：
     * 一是在语言的语法上没有争议，而是易于编译器的编写，因为编译器的解析器可以用类似YACC这样的“编译器编译器”自动产生。
     * EBNF也用于许多其他标准，如定义协议格式，数据格式和XML,SGML这样的标记语言。
       HTML没有按照语法定义，而是用SGML DTD这样的高级语法定义的。

   在 Lisp 中，需要将 syntax 自己进行设计，但是使用 BNF 是绝对有些抽象的，如果可以使用 可视化 的形式，展示出来，就好了。

** 如何使用形式语法

   现在，我们已经了解什么是BNF和EBNF以及它们的用途了，但还不知道为什么它们很有用以及如何利用它们。

   形式语法最明显的用法已经提到过了：一旦为语言制定了形式语法，就完全定义了这个语言。
   对于那些东西可以用于语言，那些东西不可以就不会有歧义了。
   这非常有用因为用普通语言描述的语法不仅冗长，而且会产生对不同的解释。

   另一个好处是：形式语法是数学产物，可以被计算机理解。
   实际上有许多程序可以用(E)BNF语法输入，并自动为给定语法的解析器提供处理代码。 // 就像是 正则表达式，正则匹配一样吧。。。
   实际上，这是设计编译器的常见做法：用带有语法输入的所谓“编译器编译器”产生编程语言的解析器代码。

   当然，编译器除了做语法检查之外还做许多其他检查，他们也产生代码。
   这些都没有在(E)BNF中描述，因此编译器编译器通常有针对一种语法中不同代码的代码块连接（也叫做操作）的特殊语法。
   最有名的编译器编译器是YACC(Yet Another Complier Complier)，产生C代码，其他的编译器还有针对C++，JAVA，Python等等其他语言的。
