#+TITLE:       Types and Programming Languages
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-08-01 Mon


* 1 Introduction

** 1.1 Types in Computer Science

** 1.2 What Types Systems Are Good For

*** Detecting Errors

    The most obvious benefit of static typechecking is that it always early detection of some programming errors.

*** Abstraction

   More *abstraction* thinking about *interfaces* generally leads to better design.

*** Documentation

    Types are also useful when reading programs. The type declarations in procedure headers and module interfaces constitute a form of documentation, giving useful hints about behavior.  Moreover, unlike descriptions embedded in comments, this form of documentation cannot become outdated, since it is checked during every run of the compiler. This role of types is particularly important in module signatures.

*** Language Safety

    The term "safe language" is, unfortunately, even more contentious than "type system".

    A safe language is one that protects its own abstraction.

    Language safety is not the same thing as static type safety. Language safety can be achieved by static checking, but also by run-time checks that trap nonsensical operations just at the moment when they are attempted and stop the program or raise an exception. For example, Scheme is a safe language, even though it has no static type system.

*** Efficiency

** 1.3 Type Systems and Language Design

   The concrete syntax of typed languages tends to be more complicated than that of untyped languages, since type annotations must be taken into account. It is easier to do a good job of designing a clean and comprehensible syntax when all the issues can be addressed together.

   The assertion that types should be an integral part of a programming language is separate from the question of where the programmer must physically write down type annotations and where they can instead be inferred by the compiler. A well-designed statically typed language will never require huge amounts of type information to be explicitly and tediously maintained by the programmer. There is some disagreement, though, about how much explicit type information is too much. The designers of languages in the ML family have *worked hard* to keep annotations to a *bare minimum*, using *type inference methods* to recover the necessary information. Languages in the C family, including Java, have chosen a somewhat more *verbose style*.

** 1.4 Capsule History

** 1.5 Related Reading

* 2 Mathematical Preliminaries

** 2.1 Sets, Relations, and Functions

** 2.2 Ordered Sets

** 2.3 Sequences
** 2.4 Induction
** 2.5 Background Reading

   A proof is a repeatable experiment in persuasion.

* 3 Untyped Arithmetic Expressions

  It serves as a straightforward vehicle for the introduction of several fundamental concepts -- abstract syntax, inductive definitions and proofs, evaluation, and the modeling of run-time errors.

** 3.1 Introduction

   BNF :: 几乎每一位新编程语言书籍的作者都使用巴科斯范式来定义编程语言的语法规则。

   BNF 被用来形式化定义语言的语法，以使其规则没有歧义。

   事实上，BNF 非常精确，围绕这些语法有很多数学理论，使得人们竟然可以机械地为基于 BNF 语法的 语言构造解析器。
   （有些语法不能实现，但通常可以手工地通过转换成其他形式来实现）。

   BNF 语法定义的语言只不过是一个字符串集合，你可以按照下述规则书写，这些规则叫做书写规范（生产式规则），形式如下：
      symbol := alternative1 | alternative2 ...

   每条规则申明 := 左侧的符号必须被右侧的某一个可选项代替。
   替换项用“|”分割（有时用“::=”替换“:=”，但意思是一样的）。
   替换项通常有两个符号和终结符构成。
   之所以叫做终结符是因为没有针对他们的书写规范，他们是书写过程的终止（符号通常被叫做非终止符，也有人叫非终端）

   BNF 语法的另一个变化是把终止符（终端）放在引号中，把他们与符号区别开来。
   有些 BNF 语法用符号明确地标明允许使用空格的地方，而有的语法则把它留给读者推测。
   BNF 中有一个特殊符号“@”，表示符号可以去掉。如果用@替换符号，只需要将符号去掉。这非常有用，因为如果不利用这个技巧，有时很难终止替换过程。
   因此，一个语法描述的语言就是用书写规则（生产式规则）写的字符串的集合。如果一个字符串无法用这些规则写出，那么，该字符串在这个语言中就被禁用。

** 3.2 Syntax

   There are several equivalent ways of defining the syntax of our language.

*** Terms, Inductively
** 3.3 Introduction on Terms
** 3.4 Semantic Styles

   - *Operational semantics* specifies the behavior of a programming language by defining a simple /abstract machine/ for it. This machine is "abstract" in the sense that it uses the terms of the language as its machine code, rather than some low-level microprocessor instruction set.

   - *Denotational semantics* takes a more abstract view of meaning: instead of just a sequence of machine state, the meaning of a term is taken to be some mathematical object, such as a number or a function.

   - *Axiomatic semantics* takes a more direct approach to these laws: instead of first defining the behaviors of programs (by giving some operational or denotational semantics) and then deriving laws from this definition, axiomatic methods take the laws themselves as the definition of the language.

** 3.5 Evaluation

   This interplay between the rules determines a particular *evaluation strategy* for conditionals, corresponding to the familiar order of evaluation in common programming languages: to evaluate a conditional, we must first evaluate its guard; if the guard is itself a conditional, we must first evaluate its guard; and so on.

   *computation rules*
   *congruence rule*

   An instance of an inference rule is obtained by consistently replacing each meta-variable by the same term in the rule's conclusion and all its premises (if any).

   A rule is satisfied by a relation if, for each instance of the rule, either the conclusion is in the relation or one of the premises is not.

** 3.6 Notes

   The ideas of abstract and concrete syntax, parsing, etc., are explained in dozens of textbooks on compilers.

   // 大多数学的是 compiler，从编译实现解读，设计一个类C语言，而真正的应该是考虑 一个语言系统中的 types 和其他一些 paradimgs 才行，然后，通过实现 compilers 实现自己的语言。

* 4 An ML Implementation of Arithmetic Expressions

   Of course, tastes in languages vary and good programmers can use whatever tools come to hand to get the job done.

** 4.1 Syntax

   Datatype definition mechanism.

   所有你想要表达的工程应用，都是包含非常多的信息比特的，既然你想要形成一个特别的，独特的应用，就必须要在一个没有太多比特的系统平台上，创建添加很多的信息比特，才可以。
   如果，你只想建立一个网站，一个平平庸庸的网站，只需要，在一个含有固定比特数目的网站上面，添加一些，或修改一些比特而已。

   所以，工程系统，就像建筑工程师一样，砖头可以有，要挑选好的砖头，挑选好的机器，挑选好的类型，将这些合并起来，就是一个独一无二的比特流。

** 4.2 Evaluation

   The implementation of the evaluation relation closely follows the single-step evaluation rules. Theses rules define a partial function that, when applied to a term that is not yet a value, yields the next step of evaluation for that term. When applied to a value, the result of the evaluation function yields no result.

   To translate the evaluation rules into OCaml, we need to make a decision about how to handle this case. One straightforward approach is to write the single-step evaluation function eval1 so that it raises an exception when none of the evaluation rules apply to the term that it is given.

   Mathematical definition of evaluation.

   Big-step evaluation rules.
   single-step evaluation rules.

** 4.3 The Rest of the Story

* 5 The Untyped Lambda-Calculus

  A formal system invented by Alonzo Church, in which all computation is reduced to the basic operations of function definition and application.
  Lambda-calculus's importance arises from the fact that it can be viewed simultaneously as a simple programming language in which computations  can be described and as a mathematical object about which rigorous statements can be proved.

  The lambda-calculus can be enriched in a variety of ways. First, it is often convenient to add special  concrete syntax for features like numbers, tuples, records, etc, whose behavior can already be simulated in the core language.

** 5.1 Basics

   Procedural (or functional) abstraction is a key feature of essentially all programming languages.

*** Abstract and Concrete Syntax

    The focus of attention in this book is on abstract, not concrete, syntax. Of course, when we write terms in examples, definitions, theorems, and proofs, we will need to express them in a concrete, linear notation, but we always have their underlying abstract syntax trees in mind.

    // 将语法分析树，用concrete syntax的形式实现，就是用字符串（命令符或操作符）的形式展示，是一种非常直观操作，但是，视觉上，不太满足的方案。当语法分析树，深度太大的时候，这个用文字描述的 concrete syntax 将会非常的丑陋。
    不如用lisp的形式，敲入代码，用可视化的方式，展示代码，不仅仅展示 concrete syntax，还在视觉上展示了语法分析树。

    To save writing too many parentheses, we adopt two conventions when writing lambda-terms in linear form.
    // 使用一种，默认的，比 lisp 少一层括号的形式。
    First, application associates to the left.
    Second, the bodies of abstractions are taken to extend as far to the right as possible.

*** Variables and Metavariables

*** Scope

*** Operational Semantics

    The call-by-value strategy is strict, in the sense that the arguments to functions are always evaluated, whether or not they are used by the body of the function.

    The choice of evaluation strategy actually makes little difference when discussing type systems. The issues that motivate various typing features, and the techniques used to address them, are much the same for all the strategies.

    In this book, we use call by value, both because it is found in most well-known languages and because it is the easiest to enrich with features such as exceptions and references.

** 5.2 Programming in the Lambda-Calculus

   The lambda-calculus is much more powerful than its tiny definition might suggest.

*** Multiple Arguments

    The transformation of multi-argument functions into higher-order functions is called currying in honor of Haskell Curry, a contemporary of Church.

*** Church Booleans

    Another language feature that can easily be encoded in the lambda-calculus is boolean values and conditionals.

    // 所有的都是函数，所有的都是可以执行的，当然，前提是都得按照该函数的正确的执行方式。

*** Pairs
*** Church Numerals

    Representing numbers by lambda-terms is only slightly more intricate than what we have just seen.

*** Enriching the Calculus

    We have seen that booleans, numbers, and the operations on them can be encoded in the pure lambda-calculus. Indeed, strictly speaking, we can do all the programming we ever need to without going outside of the pure system. However, when working with examples it is often convenient to include the primitive booleans and numbers (and possibly other data types) as well.

    // 就像使用汇编语言，或者是更第低级的二进制编程，当然也是可以完成所有功能的，但是，我们希望，讲这个抽象层次，到达我们思维中更加实惠，或者是更加贴切的场合。

*** Representation

    What, exactly, does it mean to say that the *Church numerals* represent *ordinary numbers*?
    To answer, we first need to remind ourselves of what the ordinary numbers are.

    Thus, in terms of their effects on the overall results of programs, there is no observable dif- ference between the real numbers and their Church-numeral representation.

** 5.3 Formalities

*** Syntax
*** Substitution
*** Operational Semantics

    Taken together, these rules completely determine the order of evaluation for an application t1 t2:
    + we first use E-App1 to reduce t1 to a value,
    + then use E-App2 to reduce t2 to a value,
    + and finally use E-AppAbs to perform the application itself.

    Adapt these rules to describe the other three strategies for evaluation:
    + full beta-reduction,
    + normal-order,
    + and lazy evaluation.

** 5.4 Notes
* 6 Nameless Representation of Terms
** 6.1 Terms and Contexts
** 6.2 Shifting and Substitution
** 6.3 Evaluation
* 7 An ML Implementation of the Lambda-Calculus

  An executable evaluator for *untyped lambda-terms* can be obtained by a straightforward translation of the foregoing definitions into OCaml.

** 7.1 Terms and Contexts
** 7.2 Shifting and Substitution
** 7.3 Evaluation
** 7.4 Notes

   Interpreters (and compilers) for functional languages that are tuned for speed instead of simplicity use a different strategy:
   Instead of actually performing the substitution, we simply record an association between the bound variable name and the argument value in an auxiliary data structure called the environment, which is carried along with the term being evaluated.
   When we reach a variable, we look up its value in the *current environment*. This strategy can be modeled by *regarding the environment as a kind of explicit substitution* —i.e., by moving the mechanism of substitution from the meta-language into the object language, making it a part of the syntax of the terms manipulated by the evaluator, rather than an *external operation* on terms.

* 8 Typed Arithmetic Expressions
** 8.1 Types

   Evaluating a term can either result in a value or else *get stuck* at some stage, by reaching a term like /pred false/, for which no evaluation rule applies.

   Stuck terms correspond to meaningless or erroneous programs. We would therefore like be able to tell, without actually evaluating a term, that its evaluation will definitely not get stuck.
   To do this, we need to distinguish between terms whose result will be a numeric value (since these are the only ones that should appear as arguments to pred, succ, and iszero) and terms whose result will be a boolean (since only these should appear as the guard of a conditional). We introduce two types, Nat and Bool, for classifying terms in this way.

** 8.2 The Typing Relation
** 8.3 Safety = Progress + Preservation

   The most basic property of this type system or any other is safety (also called soundness): well-typed terms do not "go wrong." We have chosen how to formalize what it means for a term to go wrong: it means reaching a "stuck state" that is not designated as a final value but where the evaluation rules do not tell us what to do next.

   What we want to know, then, is that well-typed terms do not get stuck.
   We show this in two steps, commonly known as the "progress" and "preservation" theorems.

   + Progress :: A well-typed term is not stuck (either it is a value or it can take a step according to the evaluation rules).
   + Preservation :: If a well-typed term takes a step of evaluation, then the resulting term is also well typed.

   These properties together tell us that a well-typed term can never reach a stuck state during evaluation.

   The proof that types are preserved by evaluation is also quite straightforward for this system.
* 9 Simply Typed Lambda-Calculus

  This chapter introduces the most elementary member of the family of typed languages that we shall be studying for the rest of the book: the simply typed lambda-calculus of Church and Curry.

** 9.1 Function Types
** 9.2 The Typing Relation
** 9.3 Properties of Typing

   As in Chapter 8, we need to develop a few basic lemmas before we can prove type safety. Most of these are similar to what we saw before -- we just need to add contexts to the typing relation and add clauses to each proof for lambda-abstractions, applications, and variables. The only significant new requirement is a substitution lemma for the typing relation.

   First off, an inversion lemma records a collection of observations about how typing derivations are built: the clause for each syntactic form tells us "if a term of this form is well typed, then its subterms must have types of these forms..."

   For many of the type systems that we will see later in the book, this simple correspondence between terms and derivations will not hold: a single term will be assigned many types, and each of these will be justified by many typing derivations. In these systems, there will often be significant work involved in showing that typing derivations can be recovered effectively from terms.

** 9.4 The Curry-Howard Correspondence
** 9.5 Erasure and Typability
** 9.6 Curry-Style vs. Church-Style

   There are two different styles in which the semantics of the simply typed lambda-calculus can be formulated:
   + as an evaluation relation defined directly on the syntax of the simply typed calculus,
   + or as a compilation to an untyped calculus plus an evaluation relation on untyped terms.

   An important commonality of the two styles is that, in both, it makes sense to talk about the behavior of a term t, whether or not t is actually well typed.

   We first define the terms, then define a semantics showing how they behave, then give a type system that rejects some terms whose behaviors we don’t like. Semantics is prior to typing.

** 9.7 Notes

   Well-typed programs cannot “go wrong.”

* 10 An ML Implementation of Simple Types
