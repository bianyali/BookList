#+TITLE:       Seven Languages in Seven Weeks
#+AUTHOR:      Yali Bian
#+EMAIL:       byl.lisp@gmail.com
#+DATE:        2015-09-04 Fri


* Ruby
* Io
* Prolog
* Scala

  强类型是一种思想上的对于事物的有清晰定义的表现，虽然可能会让某些表示变得繁琐，但是在思维上，却是清晰的。

  面向对象的类集数据和行为于一身。

  面向对象是将一些列的相关的东西放到一个里面，但是这样，就会将数据和函数太过相关了吧。函数相关的应该是 type 和 函数。
  对象相关的是，一个集里面的某个 变量 和 函数。所以，这个里面的函数，处理外进的需要改变，其他的都不需要吧。关键就是为了将外进的和本身的进行隔离吧。。。

  既然，class 或 对象 的目的就是将一个data 和其相关的 操作，封装起来，这也无可厚非。只是修建 class 的时候，不同而已。这和 haskell 的强大的 type system 不就是相同的么。只是将数据类型和数据类型操作，以及 对象具体数据和其对应操作两种变现和描述形式吧。 两种方案，哪种更加具有明显的思维的记忆和区分性，对于不同类型的哪种更好。

  Haskell 使用 typeclass 来表明其所有的操作函数，java 则是使用类中声明的抽象类，接口或继承的函数操作。类这种方式，可以让类型系统中的操作也相应的继承下来？？？那么Haskell 的类型系统呢？？？


* Erlang
* Clojure
* Haskell
