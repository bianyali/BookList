#+TITLE:         Thinking in UML
#+AUTHOR:        Yali Bian
#+DATE:          2015-08-18 Tue


* 1 为什么需要 UML

** 1.1 面向过程还是面向对象

  人们很快发现了问题：编程需要的对象，不但不能够从设计中自然地推导出来.
  而且 强调连续性和过程化的结构化设计 与 事件驱动型的离散对象结构 之间有着难以调和的矛盾。

** 1.2 UML 带来了什么

*** 可视化

    把那些通过文字很难表达清楚的，隐晦的潜台词用简单直观的图形表达出来，准确直观地描述复杂地含义。

    一段描述汽车车窗，方向盘之类地话，看起来很简单，这是因为汽车是我们熟悉地事务。 如果一个不知道汽车地人，靠这段描述去设计一辆汽车地话，一定觉得缺少了很多信息。

    如果信息点比较多，而且相互之间有关系，阅读文字并不容易了解到到底叙述了怎么样地一个逻辑结构。 如果是面向更加复杂地业务需求时，书写或阅读长达几十页地文字，要把所有地信息都关联起来，并且准确地理解，就更加困难了。

    用文字来表达风花雪月是很美地，朦胧美，想象美。 但是要用来说明一个结构，是不太容易地。

    逻辑结构，相互之间关联比较多的话，更好的是用 图形 来表达。

*** RUP

    UML 是一种语言，用来描述软件生产过程中要产生的可视化形式的文档
    指导 programmer 去开发software。
    RUP 是指导如何产生这些文档以及这些文档要讲述什么样的方法。

* 2 建模基础

** 2.1 建模

** 2.2 用例驱动

** 2.3 抽象层次

** 2.4 视图

   视图是人们观察事物的角度。

   恰当的视角可以让观察者更容易的抓住信息的本质。

** 2.5 对象分析方法

* 3 UML 核心元素

** 3.1 版型 － steretype

   这个概念是对 UML 元素基础定义的扩展，在同一个元素基础定义的基础上，赋予特别的含义，使得这个元素适用于特定的场合。

   类的版型有：接口，边界类，实体类，控制类。

   版型可以自定义。

** 3.2 参与者 - actor

*** 基本概念

    参与者（actor）在建模过程中处于核心地位。 actor 是在系统之外与系统交互的某人或某事物。
